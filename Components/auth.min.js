function userIdMaker(browser,version,frequency,location1,location2){
    temp = "Guest@"+((new Date).getFullYear()-2000)+"01"+((browser[0]).toLowerCase());
    temp += intTochar(version[0]*1,"upper")+version[1]+version[2];
    temp += frequency==0?'f':'m';
    temp += location1[0]+location1[1]+"K&5r"+location2[0]+location2[1]+intTochar(location2[2]*1,"upper")+'W';
    temp += (((new Date).getDate())<10?'0'+((new Date).getDate()):((new Date).getDate()))+"h";
    temp += (((new Date).getMonth()+1)<10?'0'+((new Date).getMonth()+1):((new Date).getMonth()+1))+"f";
    return temp;
}
function timeEncoder(time,key){
    time = time.toString();
    if(key==0){
        time = time.replaceAll("0","o");
        time = time.replaceAll("1","A");
        time = time.replaceAll("3","E");
        time = time.replaceAll("5","f");
    }else{
        time = time.replaceAll("o","0");
        time = time.replaceAll("A","1");
        time = time.replaceAll("E","3");
        time = time.replaceAll("f","5");
    }
    return time;
}
function charToint(digit,cass){
    let start = 0;
    if(cass=="upper"){
        start = 65;
    }else{
        start = 97;
    }
    temp = (digit[0].charCodeAt()-start+1)>0&&(digit[0].charCodeAt()-start+1)<27;
    if(temp==true){
        return (digit[0].charCodeAt()-start+1);
    }else{
        return null;
    }
}
function intTochar(digit,cass){
    let start = 0;
    if(cass=="upper"){
        start = 65;
    }else{
        start = 97;
    }
    temp = String.fromCharCode(digit+(start-1));
    return temp;
}
function chronoChecker(date,time,encodedDate){
    let diff=0;
    if(encodedDate==''||encodedDate==undefined){
        diff = (new Date()).getTime()-(new Date(`"${reverseDate(date)},${time}"`)).getTime();
    }else{
        diff = (new Date).getTime() - encodedDate*1;
        // console.log((new Date).getTime(), encodedDate*1, diff);
    }
    diff = diff / (1000 * 60);
    if(diff < 5 && diff > 0){
        return true;
    }else{
        return false;
    }
}
function strCutter(str, range){
    if(range < 0 || range > str.length){
        return null;
    }
    const cuttedString = str.substring(0,range);
    const restString = str.substring(range);
    return [cuttedString, restString];
}
function approximateTest(link){
    let modifiedlink = "https://kidKrishkode.github.io/inphantApi.github.io/main.html?"+link.split('?')[1];
    const url = new URL(modifiedlink);
    const params = url.searchParams;
    //file:///D:/.vscode/Vs%20programmes/inphantApi/main.html?page=ApiPage&test=IcA24fD11NaN%00A7A4486fEfA92&pid=3&env=true
    (link.split('?')[1]).split('NaN%',1)[0].length!=(link.split('?')[1]).length?testPageRoute(link):0;
    if(params.has('test')){
        modifiedlink = params.get('test');
        // if(modifiedlink=='ok'){return true;}
        modifiedlink = strCutter(modifiedlink,1);
        if(modifiedlink[0]=='I'){ //I
            modifiedlink = strCutter(modifiedlink[1],1);
            browserDetails();
            if(modifiedlink[0]==((browserData[0][0]).toLocaleLowerCase())){ //c
                modifiedlink = strCutter(modifiedlink[1],3);
                let t = strCutter(browserData[1],1);
                if(modifiedlink[0]==intTochar(t[0]*1,"upper")+t[1]){ //A22
                    modifiedlink = strCutter(modifiedlink[1],1);
                    if(modifiedlink[0]==freqVisit()){ //f
                        modifiedlink = strCutter(modifiedlink[1],1);
                        if(modifiedlink[0]=='D'||modifiedlink[0]=='M'){ //M
                            modifiedlink = strCutter(modifiedlink[1],1);
                            if(modifiedlink[0]==1){ //1
                                modifiedlink = strCutter(modifiedlink[1],1);
                                if(modifiedlink[0]==1){ //1
                                    modifiedlink = strCutter(modifiedlink[1],3);
                                    locationDetails();
                                    t = strCutter(locationData[1],2);
                                    if(modifiedlink[0]==t[0]+intTochar(t[1]*1,"upper")&&modifiedlink[0]!='00A'){ //08H
                                        modifiedlink = strCutter(modifiedlink[1],13);
                                        modifiedlink = timeEncoder(modifiedlink[0],1);
                                        if(chronoChecker(0,0,modifiedlink)){ //A7o99Ao94f274
                                            return true;
                                        }else{
                                            return false;
                                        }
                                    }else{
                                        testError(201,"Unkown Location");
                                    }
                                }else{
                                    return false;
                                }
                            }else{
                                testError(100,"No internet!");
                            }
                        }else{
                            testError(404,"Unkown Device!");
                        }
                    }else{
                        return false;
                    }
                }else{
                    testError(203,"Browser Version unlisted! please update");
                }
            }else{
                testError(404,"Unkown Browser!");
            }
        }else{
            return false;
        }
    }
    // return false;
}
let browserData = [];
let locationData = [];
function browserDetails(){
    if(browserData.length==0){
        getBrowserdata();
        browserDetails();
    }else{
        try{
            temp = strCutter(browserData[1],3);
            browserData[1] = temp[0];
        }catch(e){}
        return browserData;
    }
}
function locationDetails(){
    if(locationData.length==0){
        getUserLocation();
        locationData = ['22','088'];
    }else{
        if(locationData[0]==locationData[1]&&locationData[0]==-1){
            locationData = ['22','088'];
        }
        if(locationData[0]>=0&&locationData[1]>=0&&locationData[1].length<3){
            locationData[1] = '0'+locationData[1];
        }
        if(locationData[1].length<=7&&(new URL(window.location['href'])).hostname!=''){
            locationData[1] = '0'+locationData[1][1]+locationData[1][2]+locationData[1][3]+locationData[1][4]+locationData[1][5];
        }
        return locationData;
    }
}
function freqVisit(){
    return 'f';
}
function userIdTest(id){
    let modifiedId = id;
    const url = new URL(modifiedId);
    const params = url.searchParams;
    if(id!=''||id!=undefined){
        modifiedId = strCutter(modifiedId,6);
        if(modifiedId[0]=='Guest@'){ //Guest@
            modifiedId = strCutter(modifiedId[1],4);
            if(modifiedId[0]==(((new Date).getFullYear())-2000)+"01"){ //2401
                modifiedId = strCutter(modifiedId[1],1);
                if(modifiedId[0]==(((browserDetails())[0])[0]).toLocaleLowerCase()){ //c
                    modifiedId = strCutter(modifiedId[1],3);
                    let t = strCutter(browserDetails()[1],1);
                    if(modifiedId[0]==intTochar(t[0]*1,"upper")+t[1]){ //A22
                        modifiedId = strCutter(modifiedId[1],1);
                        if(modifiedId[0]==freqVisit()){ //f
                            modifiedId = strCutter(modifiedId[1],6);
                            if(modifiedId[0]==((locationDetails()[0])+'K%5r')){ //22K%5r
                                modifiedId = strCutter(modifiedId[1],4);
                                t = strCutter(locationDetails()[1],2);
                                if(modifiedId[0]==t[0]+intTochar(t[1]*1,"upper")+'W'){ //08HW
                                    modifiedId = strCutter(modifiedId[1],3);
                                    if(modifiedId[0]==(((new Date).getDate())<10?'0'+((new Date).getDate()):((new Date).getDate()))+'h'){ //08h
                                        modifiedId = strCutter(modifiedId[1],3);
                                        if(modifiedId[0]==(((new Date).getMonth()+1)<10?'0'+((new Date).getMonth()+1):((new Date).getMonth()+1))+'f'){ //03f
                                            modifiedId = strCutter(modifiedId[1],0);
                                            return true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return false;
}
let DataBin, BashBin;
function fetchDataBase(){
    try{
        const retrievedArrayString = localStorage.getItem('inphantApiInfo');
        const retrievedArray = JSON.parse(retrievedArrayString);
        if(retrievedArray==undefined||retrievedArray==null){
            return true;
        }
        DataBin = retrievedArray[0];
        BashBin = retrievedArray[1];
        return true;
    }catch(error){
        console.log("Database fetch is not possible due to \n",error);
        return false;
    }
}
function checkStorage(){
    const totalSpace = 5*1024*1024;
    let usedSpace = 0;
    for(const key in localStorage){
        if(localStorage.hasOwnProperty(key)){
            usedSpace += localStorage.getItem(key).length;
        }
    }
    const freeSpace = totalSpace - usedSpace;
    const total = usedSpace + freeSpace;
    const usedPercen = (usedSpace/total)*100;
    const roundPercen = Math.round(usedPercen*100)/100;
    return roundPercen; //5MB
}
function pushData(){
    temp = [DataBin, BashBin];
    return storeDataBase('inphantApiInfo',temp);
}
function clearData(){
    DataBin.length = 0;
    BashBin.length = 0;
    if(pushData()){
        voiceOver("Database is empty now.");
    }else{
        voiceOver("Not able to clear database.");
    }
}
function testError(status,message){
    try{
        document.getElementById('errorModel').innerHTML = ErrorModel.htmlData;
        document.getElementById('errorModel').style.display = "block";
        document.getElementById('errorModelLabel').innerHTML = "Error "+status+"!";
        document.getElementById('errorModelBody').innerHTML = message;
    }catch(e){
        console.error("New Error:\n",e);
    }
}
function closeTestError(){
    try{
        document.getElementById('badLinkHit').style.display = "block";
        document.getElementById('errorModel').style.display = "none";
    }catch(e){
        console.error("New Error:\n",e);
    }
}
